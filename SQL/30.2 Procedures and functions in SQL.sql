DROP PROCEDURE IF EXISTS ListBooks;

DELIMITER $$

CREATE PROCEDURE ListBooks()
BEGIN
SELECT BOOK_ID, TITLE, PUBYEAR FROM BOOKS;

END $$

DELIMITER ;

CALL ListBooks();




DROP FUNCTION IF EXISTS VipLevel;

DELIMITER $$

CREATE FUNCTION VipLevel(booksrented INT) RETURNS VARCHAR(20) DETERMINISTIC
BEGIN
    DECLARE result VARCHAR(20) DEFAULT 'Standard customer';
    IF booksrented >= 10 THEN
        SET result = 'Gold Customer';
    ELSEIF booksrented >= 5 AND booksrented < 10 THEN
        SET result = 'Silver Customer';
    ELSEIF booksrented >= 2 and booksrented < 5 THEN
        SET result = 'Bronze Customer';
ELSE
        SET result = 'Standard customer';
END IF;
RETURN result;
END $$

DELIMITER ;

SELECT VipLevel(12) AS LEVEL;




DROP PROCEDURE IF EXISTS getReaderName;

DELIMITER $$

CREATE PROCEDURE getReaderName(IN readerId INT(10))
BEGIN
SELECT FIRSTNAME, LASTNAME, READER_ID FROM READERS
WHERE readerId = READER_ID;
IF readerId <= 0 THEN
        SET readerId = 'Error! ID must be bigger than 0!';
END IF;
END $$

DELIMITER ;

CALL getReaderName(3);





ALTER TABLE READERS ADD VIP_LEVEL VARCHAR(20);

DROP PROCEDURE IF EXISTS UpdateVipLevels;

DELIMITER $$

CREATE PROCEDURE UpdateVipLevels()
BEGIN
    DECLARE BOOKSREAD, DAYS, RDR_ID INT;
    DECLARE BOOKSPERMONTH DECIMAL(5,2);
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_READERS CURSOR FOR SELECT READER_ID FROM READERS;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
OPEN ALL_READERS;
WHILE (FINISHED = 0) DO
    FETCH ALL_READERS INTO RDR_ID;
        IF (FINISHED = 0) THEN
SELECT COUNT(*) FROM RENTS
WHERE READER_ID = RDR_ID
    INTO BOOKSREAD;

SELECT DATEDIFF(MAX(RENT_DATE), MIN(RENT_DATE)) + 1 FROM RENTS
WHERE READER_ID = RDR_ID
    INTO DAYS;

SET BOOKSPERMONTH = BOOKSREAD / DAYS * 30;

UPDATE READERS SET VIP_LEVEL = VipLevel(BOOKSPERMONTH)
WHERE READER_ID = RDR_ID;
COMMIT;
END IF;
END WHILE;

CLOSE ALL_READERS;
END $$

DELIMITER ;

CALL UpdateVipLevels();

SELECT * FROM READERS;





ALTER TABLE BOOKS ADD BESTSELLER BOOLEAN;

DROP PROCEDURE IF EXISTS UpdateBestsellers;

DELIMITER $$

CREATE PROCEDURE UpdateBestsellers()
BEGIN
    DECLARE BOOKSRENT, COUNTING, BOOK INT;
    DECLARE FINISHED INT DEFAULT 0;
    DECLARE ALL_RENTS CURSOR FOR SELECT BOOK_ID FROM BOOKS;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET FINISHED = 1;
OPEN ALL_RENTS;
WHILE (FINISHED = 0) DO
        FETCH ALL_RENTS INTO COUNTING;
        IF (FINISHED = 0) THEN
SELECT COUNT(*) FROM RENTS
WHERE BOOK_ID = COUNTING
    INTO BOOK;

IF (BOOK > 2) THEN
                    SET BOOKSRENT = 1;
ELSE
                    SET BOOKSRENT = 0;
END IF;

UPDATE BOOKS SET BESTSELLER = BOOKSRENT
WHERE BOOK_ID = COUNTING;
COMMIT;
END IF;
END WHILE;
CLOSE ALL_RENTS;
END $$

DELIMITER ;

CALL UpdateBestsellers();

SELECT * FROM BOOKS;
